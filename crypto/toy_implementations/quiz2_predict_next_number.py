

# Goal: predict the next number of the sequence

seq = [4292994350, 1536389295, 4042431367, 3384302645, 2035141728, 3694012268, 
	2800106660, 387169270, 1931368155, 2313027219, 2401988609, 4009711196, 2511867215, 
	2141921935, 3691424850, 3583068679, 55981814, 3366258802, 2870675337, 1384398332, 
	2374224221, 1109324721, 3252986718, 259642665, 4065436664, 3169491215, 684847233, 
	1967950918, 1761103132, 2789617314, 2082902972, 588732123, 323601286, 2343264793, 
	766261905, 3585151325, 1894204746, 3632833394, 1940040064, 1146207988, 3511993505, 
	685735866, 2858571120, 1874842012, 824884701, 3756573615, 2506023712, 4100053623, 
	2943458514, 820854338, 3100538591, 1990141088, 1731949124, 1334992291, 2646157195, 
	3375289919, 3700673110, 2540372588, 1239758838, 3045145299, 4070309820, 3231542850, 
	1308607425, 1320625912, 4292994350, 1536389295, 4042431367, 3384302645, 2035141728, 
	3694012268, 2800106660, 387169270, 1931368155, 2313027219, 2401988609, 4009711196, 
	2511867215, 2141921935, 3691424850, 3583068679, 55981814, 3366258802, 2870675337, 
	1384398332, 2374224221, 1109324721, 3252986718, 259642665, 4065436664, 3169491215, 
	684847233, 1967950918, 1761103132, 2789617314, 2082902972, 588732123, 323601286, 
	2343264793, 2766261905, 3585151325, 1894204746, 3632833394, 1940040064, 1146207988, 
	3511993505, 685735866, 2858571120, 1874842012, 824884701, 3756573615, 2506023712, 
	4100053623, 2943458514, 820854338, 3100538591, 1990141088, 1731949124, 1334992291, 
	2646157195, 3375289919, 3700673110, 2540372588, 1239758838, 3045145299, 4070309820, 3231542850]

# How to approach this problem?
# 1. Can we transform each number into another representation? 
# - bit representation
# - string representation
# 2. What are the relationships between two consecutive numbers?
# 3. What are the special properties of these numbers?
# - They are all quite large

BITS = ('0', '1')
ASCII_BITS = 8

def convert_to_bits(n):
    """converts an integer `n` to bit array"""
    result = []
    if n == 0:
        return [0]
    while n > 0:
        result = [int(n % 2)] + result
        n = n / 2
    return result

def bits_to_string(b):
    return ''.join([bits_to_char(b[i:i + ASCII_BITS]) 
                    for i in range(0, len(b), ASCII_BITS)])

def bits_to_char(b):
    assert len(b) == ASCII_BITS
    value = 0
    for e in b:
        value = (value * 2) + e
    return chr(value)


print convert_to_bits(seq[0])
print convert_to_bits(seq[1])
print convert_to_bits(seq[2])

# Trun to ASCII string. Will have an assertion error.

# print bits_to_string(convert_to_bits(seq[0]))
# print bits_to_string(convert_to_bits(seq[1]))
# print bits_to_string(convert_to_bits(seq[2]))
